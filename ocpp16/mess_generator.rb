##################################################################################################
#  mess_fgenerator : with json schemas descrptor, genere somme typical messages
##################################################################################################
require 'json'
require 'time'

if ARGV.size==0 
  puts "Usage : > #{$0} diretory..."
  exit(0)
end

def get_time(delta=0) (Time.now+delta).to_datetime.rfc3339 end 

def make_value_int(name,maxValue=10)
  maxv= maxValue ? maxValue : 5
  case name
  when /connector/i 
    rand(0..2).to_s
  else
    rand(0..maxValue)
  end
end
def make_value_float(name,mult)
 m=mult ? mult.to_f : 1
 rand(100.0)*m
end

def make_value_string(name,maxlength)
  maxl= maxlength ? maxlength.to_i : 5
  case name
  when /connector/i 
    rand(0..2).to_s
  when /idtag/i 
      "112244"
  when /id/i 
     "ID987686579876"[0..rand(3..8)]
  else
      a="ABCDEF123456".scan(/./).map {|c| "#{c}#{c}"}.join("")[0..maxl]
  end
end

def make_formated(json,format)
  case format
    when "date-time" then get_time()
    when "uri"
      "http://bisoux.com:8080/"
    else
      "ABCDEFGHIJKL"[2..rand(3..10)]
  end
end

def make_enumerated(enum) 
  #enum[rand(enum.size)] 
  enum.join("/")
end

def generate(json,parent)
  format=json["format"]
  enum=json["enum"]
  type=json["type"]
  case type
    when "object"
        prop=json["properties"]
        prop.each_with_object({}) {|(k,v),o| o[k]=generate(v,k)}
    when "array"
        a=json["items"]
        [ generate(a,"") , generate(a,"")]    
    when "integer"
       make_value_int(parent)
    when "boolean"
       %w{true false}[rand()]
    when "number"
       make_value_float(parent,json["multipleOf"])
       make_value_float(parent,json["multipleOf"])
    when "string"
       if format 
          make_formated(json,format)
       elsif  enum
          make_enumerated(enum)
       else
         make_value_string(parent,json["maxLength"])
       end
    else
       puts "Unknown type #{type} in #{json}"
       exit(1)
    end
    
end

puts "# Generated by #{$0} on directory #{ARGV}..."
File.open("mess.csv","w") do |csv|
  ARGV.each do |dir|
    puts "#================================================================="
    puts "#   #{dir}"
    puts "#================================================================="
    csv.puts("%s" % File.basename(dir)) 
    Dir.glob("#{dir}/*.json").each {|schemas| 
      schem=JSON.parse(File.read(schemas))
      mess=generate(schem,nil)    
      puts "# %40s => %s" % [schem["title"].gsub(/(Request)|(Response)/,""),JSON.generate(mess)]      
      csv.puts("%s;%s" % [schem["title"].gsub(/(Request)|(Response)/,""),JSON.generate(mess)]) 
    }
    csv.puts("%s;%s" % ["",""]) 
  end
end